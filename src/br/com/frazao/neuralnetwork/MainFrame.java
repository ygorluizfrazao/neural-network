/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.frazao.neuralnetwork;

import java.awt.EventQueue;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Ygor
 */
public class MainFrame extends javax.swing.JFrame {

    private long lastEpoch = -1;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        //txaText.setText(Controle.QUERY_SELECT_COBRANCA_SET_4);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pgbEpochs = new javax.swing.JProgressBar();
        pgbIterations = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        btnRun = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        lblMSETotal = new javax.swing.JLabel();
        lblMSEAtual = new javax.swing.JLabel();
        lblAdjustments = new javax.swing.JLabel();
        lblLastOutput = new javax.swing.JLabel();
        lblLastTarget = new javax.swing.JLabel();
        lblCorrectAnswers = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pgbEpochs.setStringPainted(true);

        pgbIterations.setToolTipText("");
        pgbIterations.setStringPainted(true);

        txaText.setEditable(false);
        txaText.setBackground(new java.awt.Color(0, 0, 0));
        txaText.setColumns(20);
        txaText.setForeground(new java.awt.Color(102, 255, 102));
        txaText.setRows(5);
        txaText.setToolTipText("");
        jScrollPane1.setViewportView(txaText);

        jScrollPane2.setBackground(new java.awt.Color(102, 102, 255));
        jScrollPane2.setForeground(new java.awt.Color(255, 51, 51));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });
        jPanel1.add(btnRun, new java.awt.GridBagConstraints());

        jLabel1.setText("Epochs:");
        jPanel1.add(jLabel1, new java.awt.GridBagConstraints());

        jTextField1.setText("1000");
        jPanel1.add(jTextField1, new java.awt.GridBagConstraints());

        jLabel2.setText("Iterations/Training Set:");
        jPanel1.add(jLabel2, new java.awt.GridBagConstraints());

        jTextField2.setText("1000");
        jPanel1.add(jTextField2, new java.awt.GridBagConstraints());

        jLabel3.setText("NameOutput:");
        jPanel1.add(jLabel3, new java.awt.GridBagConstraints());

        jTextField3.setColumns(20);
        jTextField3.setText("tempNet");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField3, new java.awt.GridBagConstraints());

        jLabel4.setText("Até MSE:");
        jPanel1.add(jLabel4, new java.awt.GridBagConstraints());

        jTextField4.setColumns(20);
        jTextField4.setText("0.01");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField4, new java.awt.GridBagConstraints());

        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
        flowLayout1.setAlignOnBaseline(true);
        jPanel2.setLayout(flowLayout1);

        lblMSETotal.setText("MSE(Total):");
        jPanel2.add(lblMSETotal);

        lblMSEAtual.setText("MSE(Atual):");
        jPanel2.add(lblMSEAtual);

        lblAdjustments.setText("Ajustes:");
        jPanel2.add(lblAdjustments);

        lblLastOutput.setText("Saída:");
        jPanel2.add(lblLastOutput);

        lblLastTarget.setText("Alvo:");
        jPanel2.add(lblLastTarget);

        lblCorrectAnswers.setText("Certo:");
        jPanel2.add(lblCorrectAnswers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)
                    .addComponent(pgbEpochs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pgbIterations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgbIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgbEpochs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed

        new Thread(() -> {
            try {
                //LineChart_AWT chart = new LineChart_AWT("Neural Network BenchMark","EPOCH", "MSE (total)");
                //chart.pack( );
                //RefineryUtilities.centerFrameOnScreen( chart );
                //chart.setVisible( true );
                DecimalFormat df = new DecimalFormat("#,##0.000000000");
                DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                JFreeChart chart = ChartFactory.createLineChart("Neural Network BenchMark","EPOCH", "MSE (total)", dataset, PlotOrientation.VERTICAL,true,true,false);
                ChartPanel chartPanel = new ChartPanel(chart);
                chartPanel.setPreferredSize( new java.awt.Dimension( 1200 , 500 ) );
                chartPanel.setMouseZoomable(true);
                chartPanel.setDomainZoomable(true);
                chartPanel.setMouseWheelEnabled(true);
                chartPanel.setAutoscrolls(true);
                jScrollPane2.getViewport().add(chartPanel);
                MainFrame.this.pack();
                Controle c = new Controle();
                c.trainCobranca((long epoch, long maxEpochs, long iteration, long maxIterations, double meanSquaredErrorTotal,
                        double rmseTotal ,double meanSquaredErrorEpoch, double rmseEpoch, long totalIterations, long backPropagations,
                        double lastOutput, double lastTarget, double correctAsnwers) -> {
                        EventQueue.invokeLater(() ->{
                            
                            pgbEpochs.setValue((int)(epoch*100/maxEpochs));
                            pgbIterations.setValue((int)(iteration*100/maxIterations));
                            pgbEpochs.setString(((int)(epoch*100/maxEpochs))+"%");
                            pgbIterations.setString(((int)(iteration*100/maxIterations))+"%");
                            lblMSETotal.setText("MSE(Total): "+df.format(meanSquaredErrorTotal));
                            lblMSEAtual.setText("MSE(Atual): "+df.format(meanSquaredErrorEpoch));
                            lblAdjustments.setText("Ajustes: "+backPropagations);
                            lblLastOutput.setText("Saída: "+df.format(lastOutput));
                            lblLastTarget.setText("Alvo: "+df.format(lastTarget));
                            lblCorrectAnswers.setText("Certo: "+df.format(correctAsnwers));
                            if(epoch>lastEpoch)
                            {
                                String s = "EPOCH: "+epoch+"/"+maxEpochs;
                                s+="\n"+"LOOP: "+iteration+"/"+maxIterations;
                                s+="\n"+"MSE TOTAL(RP): "+meanSquaredErrorTotal;
                                s+="\n"+"MSE EPOCH(RP): "+meanSquaredErrorEpoch;
                                s+="\n"+"RMSE TOTAL(RP): "+rmseTotal;
                                s+="\n"+"RMSE EPOCH(RP): "+rmseEpoch;
                                txaText.append(s+"\n\n");
                                lastEpoch = epoch;
                                dataset.addValue( meanSquaredErrorTotal , "MSE(Total)" , Long.valueOf(epoch));
                                dataset.addValue( meanSquaredErrorEpoch , "MSE(Epoch)" , Long.valueOf(epoch));
                                dataset.addValue( rmseTotal , "RMSE(Total)" , Long.valueOf(epoch));
                                dataset.addValue( rmseEpoch , "RMSE(Epoch)" , Long.valueOf(epoch));
                                chart.setTitle("Neural Network BenchMark (Epoch:"+epoch+")");
                                chart.getCategoryPlot().setDataset(dataset);
                            }
//                            String s = "EPOCH: "+epoch+"/"+maxEpochs;
//                            s+="\n"+"LOOP: "+iteration+"/"+maxIterations;
//                            s+="\n"+"MSE TOTAL(RP): "+meanSquaredErrorTotal;
//                            s+="\n"+"MSE EPOCH(RP): "+meanSquaredErrorEpoch;
//                            s+="\n"+"RMSE TOTAL(RP): "+rmseTotal;
//                            s+="\n"+"RMSE EPOCH(RP): "+rmseEpoch;
//                            if(lastEpoch<epoch){
//                                txaText.append(s+"\n\n");
//                                lastEpoch = epoch;
//                            }
//                            dataset.addValue( meanSquaredErrorTotal , "MSE(Total)" , Long.valueOf(backPropagations));
//                            dataset.addValue( meanSquaredErrorEpoch , "MSE(Epoch)" , Long.valueOf(backPropagations));
//                            dataset.addValue( rmseTotal , "RMSE(Total)" , Long.valueOf(backPropagations));
//                            dataset.addValue( rmseEpoch , "RMSE(Epoch)" , Long.valueOf(backPropagations));
//                            chart.setTitle("Neural Network BenchMark (Epoch:"+epoch+")");
//                            chart.getCategoryPlot().setDataset(dataset);
                        });
                        
                },Integer.parseInt(jTextField1.getText()), Integer.parseInt(jTextField2.getText()), jTextField3.getText(), Double.parseDouble(jTextField4.getText())); 
            } catch (SQLException | IOException ex) {
                ex.printStackTrace();
                txaText.setText(ex.getMessage());
            }
        }).start();
    }//GEN-LAST:event_btnRunActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblAdjustments;
    private javax.swing.JLabel lblCorrectAnswers;
    private javax.swing.JLabel lblLastOutput;
    private javax.swing.JLabel lblLastTarget;
    private javax.swing.JLabel lblMSEAtual;
    private javax.swing.JLabel lblMSETotal;
    private javax.swing.JProgressBar pgbEpochs;
    private javax.swing.JProgressBar pgbIterations;
    private javax.swing.JTextArea txaText;
    // End of variables declaration//GEN-END:variables
}
